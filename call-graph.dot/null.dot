digraph {
  compound=true;
  0[label="apply"; ];
  1[label="getMethods"; ];
  2[label="of"; ];
  3[label="apply"; ];
  4[label="toInputString"; ];
  5[label="<clinit>"; ];
  6[label="of"; ];
  7[label="cases"; ];
  8[label="getAnnotation"; ];
  9[label="value"; ];
  10[label="printType"; ];
  11[label="equals"; ];
  12[label="append"; ];
  13[label="toString"; ];
  14[label="printMethodSignature"; ];
  15[label="getParameterTypes"; ];
  16[label="getReturnType"; ];
  17[label="toString"; ];
  18[label="parseMethodSignature"; ];
  19[label="add"; ];
  20[label="toArray"; ];
  21[label="size"; ];
  22[label="length"; ];
  23[label="charAt"; ];
  24[label="main"; ];
  25[label="getMethod"; ];
  26[label="getName"; ];
  27[label="forName"; ];
  28[label="stream"; ];
  29[label="compile"; ];
  30[label="matcher"; ];
  31[label="toList"; ];
  32[label="flatMap"; ];
  33[label="parse"; ];
  34[label="value"; ];
  35[label="getDeclaringClass"; ];
  36[label="getName"; ];
  37[label="isStatic"; ];
  38[label="getModifiers"; ];
  39[label="printf"; ];
  40[label="find"; ];
  41[label="group"; ];
  42[label="parse"; ];
  43[label="toString"; ];
  44[label="invoke"; ];
  45[label="println"; ];
  46[label="fromThrowable"; ];
  47[label="getCause"; ];
  48[label="parse"; ];
  49[label="parseInputs"; ];
  50[label="assertIf"; ];
  51[label="assertTrue"; ];
  52[label="assertFalse"; ];
  53[label="callsAssertTrue"; ];
  54[label="callsAssertFalse"; ];
  55[label="callsAssertIf"; ];
  56[label="fib"; ];
  57[label="callsAssertIfWithTrue"; ];
  58[label="callsAssertFib"; ];
  59[label="allPrimesArePositive"; ];
  60[label="generatePrimeArray"; ];
  61[label="toString"; ];
  62[label="toList"; ];
  63[label="map"; ];
  64[label="stream"; ];
  65[label="asList"; ];
  66[label="join"; ];
  67[label="toString"; ];
  68[label="substring"; ];
  69[label="toString"; ];
  70[label="add"; ];
  71[label="toString"; ];
  72[label="equals"; ];
  73[label="expected"; ];
  74[label="parseInput"; ];
  75[label="expect"; ];
  76[label="nextToken"; ];
  77[label="add"; ];
  78[label="toArray"; ];
  79[label="parseCharList"; ];
  80[label="matches"; ];
  81[label="add"; ];
  82[label="get"; ];
  83[label="size"; ];
  84[label="parseIntList"; ];
  85[label="parseInt"; ];
  86[label="add"; ];
  87[label="get"; ];
  88[label="size"; ];
  89[label="hasNext"; ];
  90[label="findWithinHorizon"; ];
  0 -> 1[];
  0 -> 2[];
  3 -> 4[];
  4 -> 66[];
  4 -> 68[];
  4 -> 69[];
  4 -> 70[];
  4 -> 71[];
  5 -> 6[];
  7 -> 8[];
  7 -> 9[];
  10 -> 11[];
  10 -> 12[];
  10 -> 13[];
  14 -> 10[];
  14 -> 12[];
  14 -> 15[];
  14 -> 16[];
  14 -> 17[];
  18 -> 19[];
  18 -> 20[];
  18 -> 21[];
  18 -> 22[];
  18 -> 23[];
  24 -> 7[];
  24 -> 25[];
  24 -> 26[];
  24 -> 27[];
  24 -> 14[];
  24 -> 18[];
  24 -> 28[];
  24 -> 29[];
  24 -> 30[];
  24 -> 31[];
  24 -> 32[];
  24 -> 33[];
  24 -> 34[];
  24 -> 35[];
  24 -> 36[];
  24 -> 37[];
  24 -> 38[];
  24 -> 39[];
  24 -> 40[];
  24 -> 41[];
  24 -> 42[];
  24 -> 43[];
  24 -> 44[];
  24 -> 45[];
  24 -> 46[];
  24 -> 47[];
  33 -> 29[];
  33 -> 30[];
  33 -> 40[];
  33 -> 41[];
  33 -> 42[];
  33 -> 48[];
  42 -> 49[];
  48 -> 72[];
  49 -> 72[];
  49 -> 73[];
  49 -> 74[];
  49 -> 75[];
  49 -> 76[];
  49 -> 77[];
  49 -> 78[];
  50 -> 51[];
  50 -> 52[];
  53 -> 51[];
  54 -> 52[];
  55 -> 50[];
  56 -> 56[];
  57 -> 50[];
  58 -> 56[];
  59 -> 60[];
  61 -> 62[];
  61 -> 63[];
  61 -> 64[];
  61 -> 65[];
  61 -> 66[];
  61 -> 67[];
  74 -> 23[];
  74 -> 72[];
  74 -> 79[];
  74 -> 84[];
  74 -> 73[];
  74 -> 76[];
  74 -> 80[];
  74 -> 85[];
  75 -> 72[];
  75 -> 73[];
  75 -> 76[];
  76 -> 89[];
  76 -> 90[];
  79 -> 23[];
  79 -> 72[];
  79 -> 73[];
  79 -> 75[];
  79 -> 76[];
  79 -> 80[];
  79 -> 81[];
  79 -> 82[];
  79 -> 83[];
  84 -> 72[];
  84 -> 73[];
  84 -> 75[];
  84 -> 76[];
  84 -> 80[];
  84 -> 85[];
  84 -> 86[];
  84 -> 87[];
  84 -> 88[];
}
